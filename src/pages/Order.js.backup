import React, { useState, useEffect, useCallback } from 'react';
import { Search, Plus, Edit2, Trash2, Save, X, Package, Calendar, User, ChevronDown, Filter, ChevronLeft, ChevronRight, MapPin, StickyNote, Phone, Image, Settings, CheckCircle, Clock, AlertTriangle, DollarSign, RotateCcw, XCircle, Layers, RefreshCw, Loader2, ArrowLeft } from 'lucide-react';
import { MdReceipt, MdCheckCircle } from 'react-icons/md';
import { useNavigate, useLocation } from 'react-router-dom';
import OrderEditModal from './OrderEditModal';
import NotificationToast from '../components/NotificationToast';
import { useOrderContext } from '../contexts/OrderContext';

// কলাম visibility state ও label
const defaultColumnVisibility = {
  select: true,
  orderId: true,
  customer: true,
  products: true,
  total: true,
  date: true,
  courier: true,
  status: true,
  note: true,
  user: true,
  actions: true,
};
const columnLabels = {
  select: 'Select',
  orderId: 'Order ID',
  customer: 'Customer',
  products: 'Products',
  total: 'Total',
  date: 'Date',
  courier: 'Courier',
  status: 'Status',
  note: 'Note',
  user: 'User',
  actions: 'Actions',
};

const Order = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { orders, loading, error, fetchAllOrders, updateOrder, deleteOrder, createOrder } = useOrderContext();
  const [localLoading, setLocalLoading] = useState(true);
  const [localError, setLocalError] = useState(null);
  const [setOrders, setLoading, setError] = [() => {}, setLocalLoading, setLocalError];
  const [activeFilter, setActiveFilter] = useState('All Orders');
  const [selectedOrders, setSelectedOrders] = useState([]);
  const [searchOrderId, setSearchOrderId] = useState('');
  const [searchPhone, setSearchPhone] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [courierFilter, setCourierFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [userFilter, setUserFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [editOrderId, setEditOrderId] = useState(null);
  const [showNewOrder, setShowNewOrder] = useState(false);
  const [columnVisibility, setColumnVisibility] = useState(defaultColumnVisibility);
  const [showColumnModal, setShowColumnModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleteOrderId, setDeleteOrderId] = useState(null);
  const [toast, setToast] = useState({ show: false, message: '' });
  // Add state to track loading status for each order
  const [statusLoading, setStatusLoading] = useState({});
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [orderStatusHistory, setOrderStatusHistory] = useState({});
  const [currentOrderStatus, setCurrentOrderStatus] = useState({});
  const [showRegularStatusBoxes, setShowRegularStatusBoxes] = useState(false);
  const [pageLoading, setPageLoading] = useState(false);

  // Auto-hide toast after 2 seconds
  useEffect(() => {
    if (toast.show) {
      const timer = setTimeout(() => setToast(t => ({ ...t, show: false })), 2000);
      return () => clearTimeout(timer);
    }
  }, [toast.show]);

  // hideableColumns-এ সব কলাম
  const hideableColumns = Object.keys(defaultColumnVisibility);

  // LocalStorage sync for all columns
  useEffect(() => {
    const saved = localStorage.getItem('order_column_visibility');
    if (saved) {
      const parsed = JSON.parse(saved);
      setColumnVisibility(v => ({ ...v, ...parsed }));
    }
    // eslint-disable-next-line
  }, []);
  useEffect(() => {
    localStorage.setItem('order_column_visibility', JSON.stringify(columnVisibility));
  }, [columnVisibility]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      // Try to auto-login with test credentials
      loginForTesting();
    } else {
      fetchOrders();
    }
    // eslint-disable-next-line
  }, []);

  // Sync activeFilter with URL status param
  useEffect(() => {
    const match = location.pathname.match(/\/orders\/status\/(.+)$/);
    if (match) {
      const urlStatus = decodeURIComponent(match[1]);
      if (urlStatus === 'Pending Invoiced') {
        setActiveFilter('Pending Invoiced');
        setShowRegularStatusBoxes(false); // Reset to show Invoice status boxes
      } else if (urlStatus === 'Invoice Checked') {
        setActiveFilter('Invoice Checked');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Invoiced') {
        setActiveFilter('Invoiced');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Stock Out') {
        setActiveFilter('Stock Out');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Schedule Delivery') {
        setActiveFilter('Schedule Delivery');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Delivered') {
        setActiveFilter('Delivered');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Courier Hold') {
        setActiveFilter('Courier Hold');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Courier Return') {
        setActiveFilter('Courier Return');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Paid') {
        setActiveFilter('Paid');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Return') {
        setActiveFilter('Return');
        setShowRegularStatusBoxes(false);
      } else if (urlStatus === 'Damaged') {
        setActiveFilter('Damaged');
        setShowRegularStatusBoxes(false);
      } else if (statusTypes.includes(urlStatus)) {
        setActiveFilter(urlStatus);
        setShowRegularStatusBoxes(false);
      } else {
        setActiveFilter('All Orders');
        setShowRegularStatusBoxes(false);
      }
    } else {
      setActiveFilter('All Orders');
      setShowRegularStatusBoxes(false);
    }
    setCurrentPage(1);
    // eslint-disable-next-line
  }, [location.pathname]);

  // Process orders function
  const processOrders = async () => {
    if (orders && orders.length > 0) {
      orders.forEach(order => {
        fetchOrderStatusHistory(order.id);
      });
      
      // Set current order status from orders data
      const statusMap = {};
      orders.forEach(order => {
        statusMap[order.id] = order.status;
      });
      setCurrentOrderStatus(statusMap);
      
      // Clean up invoices for non-completed orders
      try {
        await cleanupInvoicesForNonCompletedOrders();
      } catch (error) {
        console.error('Error during invoice cleanup:', error);
      }
    }
  };

  // Fetch status history when orders change
  useEffect(() => {
    processOrders();
  }, [orders]);

  const fetchOrders = async () => {
    try {
      setPageLoading(true);
      setLocalError(null);
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch('http://localhost:5000/api/orders', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        if (response.status === 401) {
          localStorage.removeItem('token');
          throw new Error('Authentication failed. Please login again.');
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        setOrders(data.orders || []);
        // Fetch status history for all orders
        await processOrders();
      } else {
        throw new Error(data.message || 'Failed to fetch orders');
      }
    } catch (error) {
      console.error('Error fetching orders:', error);
      setLocalError(error.message);
      setToast({ show: true, message: `Error: ${error.message}` });
    } finally {
      setPageLoading(false);
    }
  };

  // Filtering logic (same as before, but now on real data)
  const statusTypes = ['All Orders', 'Processing', 'Pending Payment', 'On Hold', 'Canceled', 'Completed'];
  const courierOptions = ['All Couriers', ...Array.from(new Set(orders.map(o => o.courier).filter(Boolean)))];
  const statusOptions = ['All Status', ...Array.from(new Set(orders.map(o => o.status).filter(Boolean)))];
  const userOptions = ['All Users', ...Array.from(new Set(orders.map(o => o.user).filter(Boolean)))];

  const itemsPerPage = 10;

  // Update filteredOrders to use activeFilter from URL
  const filteredOrders = orders.filter(order => {
    let matchesStatus;
    if (activeFilter === 'All Orders') {
      matchesStatus = true;
    } else if (activeFilter === 'Pending Invoice') {
      matchesStatus = order.status === 'Completed';
    } else if (activeFilter === 'Delivered') {
      matchesStatus = order.status === 'Delivered';
    } else if (['Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery'].includes(activeFilter)) {
      // Handle specific Invoice status filters
      if (activeFilter === 'Pending Invoiced') {
        matchesStatus = order.status === 'Completed';
      } else {
        matchesStatus = order.status === activeFilter;
      }
    } else {
      matchesStatus = order.status === activeFilter;
    }
    
    const matchesOrderId = !searchOrderId || order.id?.toString().includes(searchOrderId);
    const matchesPhone = !searchPhone || (order.customerPhone || order.phone || '').includes(searchPhone);
    const matchesDate = !dateFilter || order.date === dateFilter;
    const matchesCourier = !courierFilter || courierFilter === 'All Couriers' || order.courier === courierFilter;
    const matchesStatusFilter = !statusFilter || statusFilter === 'All Status' || order.status === statusFilter;
    const matchesUser = !userFilter || userFilter === 'All Users' || order.user === userFilter;
    return matchesStatus && matchesOrderId && matchesPhone && matchesDate && matchesCourier && matchesStatusFilter && matchesUser;
  });

  const totalPages = Math.ceil(filteredOrders.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentOrders = filteredOrders.slice(startIndex, startIndex + itemsPerPage);

  const getStatusCount = (status) => {
    if (status === 'All Orders') return orders.length;
    if (status === 'Pending Invoice') return orders.filter(order => order.status === 'Completed').length;
    if (status === 'Delivered') return orders.filter(order => order.status === 'Delivered').length;
    return orders.filter(order => order.status === status).length;
  };

  const getStatusColor = (status) => {
    const colors = {
      'All Orders': 'bg-gray-100 text-gray-800',
      'Processing': 'bg-blue-100 text-blue-800',
      'Pending Payment': 'bg-yellow-100 text-yellow-800',
      'On Hold': 'bg-orange-100 text-orange-800',
      'Canceled': 'bg-red-100 text-red-800',
      'Completed': 'bg-green-100 text-green-800',
      'Delivered': 'bg-green-100 text-green-800',
      'Pending Invoice': 'bg-purple-100 text-purple-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'All Orders': return <Layers className="w-6 h-6" />;
      case 'Processing': return <Clock className="w-6 h-6" />;
      case 'Pending Payment': return <DollarSign className="w-6 h-6" />;
      case 'On Hold': return <AlertTriangle className="w-6 h-6" />;
      case 'Canceled': return <XCircle className="w-6 h-6" />;
      case 'Completed': return <CheckCircle className="w-6 h-6" />;
      case 'Delivered': return <CheckCircle className="w-6 h-6" />;
      case 'Pending Invoice': return <Package className="w-6 h-6" />;
      default: return <Package className="w-6 h-6" />;
    }
  };

  // Add a helper to get status color classes
  const getStatusBadgeColor = (status) => {
    switch (status) {
      case 'Processing': return 'bg-blue-500';
      case 'Pending Payment': return 'bg-yellow-400';
      case 'On Hold': return 'bg-orange-500';
      case 'Canceled': return 'bg-red-500';
      case 'Completed': return 'bg-green-600';
      case 'Delivered': return 'bg-green-600';
      case 'Pending Invoice': return 'bg-purple-500';
      default: return 'bg-gray-400';
    }
  };

  const handleSelectAll = (checked) => {
    if (checked) {
      setSelectedOrders(currentOrders.map(order => order.id));
    } else {
      setSelectedOrders([]);
    }
  };

  const handleSelectOrder = (orderId, checked) => {
    if (checked) {
      setSelectedOrders([...selectedOrders, orderId]);
    } else {
      setSelectedOrders(selectedOrders.filter(id => id !== orderId));
    }
  };

  // Bulk status/user assign (UI only, not API)
  const handleBulkStatusChange = (newStatus) => {
    // This will be handled by the context now
    setSelectedOrders([]);
  };
  const handleBulkUserAssign = (newUser) => {
    // This will be handled by the context now
    setSelectedOrders([]);
  };

  // একাধিক অর্ডার ডিলিট করার হ্যান্ডলার
  const handleDeleteSelected = async () => {
    if (selectedOrders.length === 0) {
      setToast({ show: true, message: 'No orders selected for deletion.' });
      setTimeout(() => setToast({ show: false, message: '' }), 3000);
      return;
    }
    setShowDeleteModal(true);
  };

  // Confirm delete selected orders
  const confirmDeleteSelected = async () => {
    setDeleteLoading(true);
    try {
      // Run all delete requests in parallel for speed
      await Promise.all(selectedOrders.map(id => deleteOrder(id)));
      setSelectedOrders([]);
      setShowDeleteModal(false);
      setToast({ show: true, message: `${selectedOrders.length} orders deleted successfully!` });
      setTimeout(() => setToast({ show: false, message: '' }), 3000);
    } catch (err) {
      setToast({ show: true, message: 'Failed to delete orders: ' + err.message });
      setTimeout(() => setToast({ show: false, message: '' }), 3000);
    } finally {
      setDeleteLoading(false);
    }
  };

  // Single order delete handler
  const handleDeleteOrder = async (orderId) => {
    setDeleteLoading(true);
    try {
      await deleteOrder(orderId);
      setToast({ show: true, message: 'Order deleted successfully!' });
      setTimeout(() => setToast({ show: false, message: '' }), 2000);
      setShowDeleteModal(false);
      setDeleteOrderId(null);
    } catch (err) {
      setToast({ show: true, message: 'Failed to delete order.' });
      setTimeout(() => setToast({ show: false, message: '' }), 2000);
    } finally {
      setDeleteLoading(false);
    }
  };

  // Add sample orders for testing
  const addSampleOrders = async () => {
    try {
      const sampleOrders = [
        {
          name: 'John Doe',
          phone: '01712345678',
          address: 'Dhaka, Bangladesh',
          total: '2500',
          status: 'Processing',
          products: [
            { product_id: 1, quantity: 2, price: 1200 },
            { product_id: 2, quantity: 1, price: 100 }
          ]
        },
        {
          name: 'Jane Smith',
          phone: '01887654321',
          address: 'Chittagong, Bangladesh',
          total: '1800',
          status: 'Pending Payment',
          products: [
            { product_id: 3, quantity: 1, price: 1800 }
          ]
        },
        {
          name: 'Bob Wilson',
          phone: '01911223344',
          address: 'Sylhet, Bangladesh',
          total: '3200',
          status: 'Completed',
          products: [
            { product_id: 1, quantity: 1, price: 1200 },
            { product_id: 4, quantity: 2, price: 1000 }
          ]
        }
      ];
      
      for (const order of sampleOrders) {
        await createOrder(order);
      }
      
      setToast({ show: true, message: 'Sample orders added successfully!' });
      setTimeout(() => setToast({ show: false, message: '' }), 2000);
    } catch (err) {
      console.error('Error adding sample orders:', err);
      setToast({ show: true, message: 'Failed to add sample orders: ' + err.message });
      setTimeout(() => setToast({ show: false, message: '' }), 3000);
    }
  };

  // TODO: Add, Edit, Delete handlers (API integration)
  // For now, only fetch and display from API, as per your request

  // Add helper for relative time
  function getRelativeTime(dateString) {
    if (!dateString) return '';
    const now = new Date();
    const date = new Date(dateString);
    const diff = Math.floor((now - date) / 1000); // seconds
    if (diff < 60) return `${diff} seconds ago`;
    if (diff < 3600) return `${Math.floor(diff/60)} minutes ago`;
    if (diff < 86400) return `${Math.floor(diff/3600)} hours ago`;
    if (diff < 604800) return `${Math.floor(diff/86400)} days ago`;
    if (diff < 2592000) return `${Math.floor(diff/604800)} weeks ago`;
    return `${Math.floor(diff/2592000)} months ago`;
  }

  // Format date in "28-07-2025 07:30:51 PM" format
  function formatDateTime(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = date.getHours();
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    const ampm = hours >= 12 ? 'PM' : 'AM';
    const formattedHours = hours % 12 || 12;
    
    return `${day}-${month}-${year} ${formattedHours}:${minutes}:${seconds} ${ampm}`;
  }

  // Clean up invoices for non-completed orders
  const cleanupInvoicesForNonCompletedOrders = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const headers = { 'Content-Type': 'application/json', ...(token ? { Authorization: 'Bearer ' + token } : {}) };
      
      // Get all invoices
      const invoicesRes = await fetch('/api/invoices', { headers });
      if (!invoicesRes.ok) {
        return;
      }
      
      const allInvoices = await invoicesRes.json();
      
      // Get all orders
      const ordersRes = await fetch('/api/orders', { headers });
      if (!ordersRes.ok) {
        return;
      }
      
      const allOrders = await ordersRes.json();
      
      // Create a map of order statuses
      const orderStatusMap = {};
      allOrders.forEach(order => {
        orderStatusMap[order.id] = order.status;
      });
      
      // Find invoices that need to be deleted
      const invoicesToDelete = allInvoices.filter(invoice => {
        const orderStatus = orderStatusMap[invoice.order_id];
        return orderStatus && orderStatus !== 'Completed';
      });
      
      // Delete invoices
      for (const invoice of invoicesToDelete) {
        const deleteRes = await fetch(`/api/invoices/${invoice.id}`, {
          method: 'DELETE',
          headers
        });
        
        if (!deleteRes.ok) {
          console.error(`Failed to delete invoice ${invoice.id}:`, deleteRes.status);
        }
      }
      
      if (invoicesToDelete.length > 0) {
        setToast({ show: true, message: `${invoicesToDelete.length} invoices removed for non-completed orders!` });
        window.dispatchEvent(new Event('invoiceDeleted'));
      }
    } catch (error) {
      console.error('Invoice cleanup error:', error);
    }
  }, []);

  // Fetch order status history
  const fetchOrderStatusHistory = async (orderId) => {
    try {
      const token = localStorage.getItem('token');
      
      const response = await fetch(`/api/orders/${orderId}/status-history`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const history = await response.json();
        setOrderStatusHistory(prev => ({
          ...prev,
          [orderId]: history
        }));
      } else {
        // If API doesn't exist, create a mock history entry
        const mockHistory = [{
          order_id: orderId,
          status: 'Processing',
          created_by: 'admin',
          created_at: new Date().toISOString()
        }];
        setOrderStatusHistory(prev => ({
          ...prev,
          [orderId]: mockHistory
        }));
      }
    } catch (error) {
      // Create fallback history entry
      const fallbackHistory = [{
        order_id: orderId,
        status: 'Processing',
        created_by: 'admin',
        created_at: new Date().toISOString()
      }];
      setOrderStatusHistory(prev => ({
        ...prev,
        [orderId]: fallbackHistory
      }));
    }
  };

  // Simple login for testing
  const loginForTesting = async () => {
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: 'admin@example.com',
          password: 'admin123'
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        localStorage.setItem('token', data.token);
        setToast({ show: true, message: 'Login successful! Fetching orders...' });
        setTimeout(() => setToast({ show: false, message: '' }), 2000);
        fetchOrders();
      } else {
        const errorData = await response.json();
        setToast({ show: true, message: 'Login failed: ' + errorData.error });
        setTimeout(() => setToast({ show: false, message: '' }), 3000);
      }
    } catch (err) {
      console.error('Login error:', err);
      setToast({ show: true, message: 'Login failed: ' + err.message });
      setTimeout(() => setToast({ show: false, message: '' }), 3000);
    }
  };

  // Development mode - bypass authentication
  const enableDevMode = () => {
    localStorage.setItem('devMode', 'true');
    setToast({ show: true, message: 'Development mode enabled! Fetching orders...' });
    setTimeout(() => setToast({ show: false, message: '' }), 2000);
    fetchOrders();
  };

  const statusBoxColors = {
    'All Orders': 'border-2 border-gray-800 bg-gradient-to-br from-gray-200 via-white to-gray-100 text-gray-900 shadow-lg',
    'Processing': 'border-blue-300 bg-blue-50 text-blue-800',
    'Pending Payment': 'border-yellow-300 bg-yellow-50 text-yellow-800',
    'On Hold': 'border-orange-300 bg-orange-50 text-orange-800',
    'Canceled': 'border-red-300 bg-red-50 text-red-800',
    'Completed': 'border-green-300 bg-green-50 text-green-800',
    'Delivered': 'border-green-300 bg-green-50 text-green-800',
    'Pending Invoice': 'border-purple-300 bg-purple-50 text-purple-800',
  };

  return (
    <div className="min-h-screen p-2">
      {/* Loading Indicator */}
      {pageLoading && (
        <div className="fixed inset-0 bg-white bg-opacity-75 flex items-center justify-center z-50">
          <div className="text-center">
            <Loader2 className="w-12 h-12 text-blue-600 animate-spin mx-auto mb-4" />
            <p className="text-lg font-medium text-gray-700">Loading orders...</p>
            <p className="text-sm text-gray-500 mt-2">Please wait while we fetch your data</p>
          </div>
        </div>
      )}
      
      <div className="p-3 sm:p-6">
        {/* Delivered Status Boxes - Show at top when Delivered is active */}
        {['Delivered', 'Courier Hold', 'Courier Return', 'Paid', 'Return', 'Damaged'].includes(activeFilter) && !showRegularStatusBoxes && (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
            {[
              { status: 'Delivered', color: 'bg-green-100 text-green-800 border-green-300', icon: <CheckCircle className="w-5 h-5" />, count: orders.filter(order => order.status === 'Delivered').length, url: '/orders/status/Delivered' },
              { status: 'Courier Hold', color: 'bg-orange-100 text-orange-800 border-orange-300', icon: <Clock className="w-5 h-5" />, count: orders.filter(order => order.status === 'Courier Hold').length, url: '/orders/status/Courier%20Hold' },
              { status: 'Courier Return', color: 'bg-blue-100 text-blue-800 border-blue-300', icon: <ArrowLeft className="w-5 h-5" />, count: orders.filter(order => order.status === 'Courier Return').length, url: '/orders/status/Courier%20Return' },
              { status: 'Paid', color: 'bg-purple-100 text-purple-800 border-purple-300', icon: <DollarSign className="w-5 h-5" />, count: orders.filter(order => order.status === 'Paid').length, url: '/orders/status/Paid' },
              { status: 'Return', color: 'bg-yellow-100 text-yellow-800 border-yellow-300', icon: <RefreshCw className="w-5 h-5" />, count: orders.filter(order => order.status === 'Return').length, url: '/orders/status/Return' },
              { status: 'Damaged', color: 'bg-red-100 text-red-800 border-red-300', icon: <XCircle className="w-5 h-5" />, count: orders.filter(order => order.status === 'Damaged').length, url: '/orders/status/Damaged' }
            ].map((item) => (
              <button
                key={item.status}
                onClick={() => {
                  navigate(item.url);
                }}
                className={`p-4 rounded-xl border-2 ${item.color} flex items-center justify-between transition-all duration-300 hover:shadow-md ${
                  activeFilter === item.status ? 'shadow-lg scale-105' : ''
                }`}
              >
                <div className="text-left">
                  <div className="text-2xl font-bold mb-1">
                    {item.count}
                  </div>
                  <div className="text-sm font-medium">
                    {item.status}
                  </div>
                </div>
                <div>
                  {item.icon}
                </div>
              </button>
            ))}
          </div>
        )}

        {/* Invoice Status Boxes - Show at top when Invoice is active */}
        {['Pending Invoice', 'Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery'].includes(activeFilter) && !showRegularStatusBoxes && (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-8">
            {[
              { status: 'Pending Invoiced', color: 'bg-yellow-100 text-yellow-800 border-yellow-300', icon: <Clock className="w-5 h-5" />, count: orders.filter(order => order.status === 'Completed').length, url: '/orders/status/Pending%20Invoiced' },
              { status: 'Invoice Checked', color: 'bg-blue-100 text-blue-800 border-blue-300', icon: <CheckCircle className="w-5 h-5" />, count: orders.filter(order => order.status === 'Invoice Checked').length, url: '/orders/status/Invoice%20Checked' },
              { status: 'Invoiced', color: 'bg-green-100 text-green-800 border-green-300', icon: <Package className="w-5 h-5" />, count: orders.filter(order => order.status === 'Invoiced').length, url: '/orders/status/Invoiced' },
              { status: 'Stock Out', color: 'bg-red-100 text-red-800 border-red-300', icon: <XCircle className="w-5 h-5" />, count: orders.filter(order => order.status === 'Stock Out').length, url: '/orders/status/Stock%20Out' },
              { status: 'Schedule Delivery', color: 'bg-purple-100 text-purple-800 border-purple-300', icon: <Calendar className="w-5 h-5" />, count: orders.filter(order => order.status === 'Schedule Delivery').length, url: '/orders/status/Schedule%20Delivery' }
            ].map((item) => (
              <button
                key={item.status}
                onClick={() => {
                  navigate(item.url);
                }}
                className={`p-4 rounded-xl border-2 ${item.color} flex items-center justify-between transition-all duration-300 hover:shadow-md ${
                  activeFilter === item.status ? 'shadow-lg scale-105' : ''
                }`}
              >
                <div className="text-left">
                  <div className="text-2xl font-bold mb-1">
                    {item.count}
                  </div>
                  <div className="text-sm font-medium">
                    {item.status}
                  </div>
                </div>
                <div>
                  {item.icon}
                </div>
              </button>
            ))}
          </div>
        )}

        {/* Status Filter Boxes */}
        {!['Pending Invoice', 'Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery', 'Delivered', 'Courier Hold', 'Courier Return', 'Paid', 'Return', 'Damaged'].includes(activeFilter) && (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
            {statusTypes.map((status) => (
              <button
                key={status}
                onClick={() => {
                  if (status === 'All Orders') {
                    navigate('/orders');
                  } else {
                    navigate(`/orders/status/${encodeURIComponent(status)}`);
                  }
                }}
                className={`p-4 rounded-xl border-2 ${statusBoxColors[status]} flex items-center justify-between transition-all duration-300 hover:shadow-md ${
                  activeFilter === status ? 'shadow-lg scale-105' : ''
                }`}
              >
                <div className="text-left">
                  <div className="text-2xl font-bold mb-1">
                    {getStatusCount(status)}
                  </div>
                  <div className="text-sm font-medium">
                    {status}
                  </div>
                </div>
                <div>
                  {getStatusIcon(status)}
                </div>
              </button>
            ))}
          </div>
        )}

        {/* Order Management Section */}
        <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-4">
                {['Pending Invoice', 'Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery'].includes(activeFilter) ? (
                  <span className="flex items-center gap-2">
                    <MdReceipt className="w-6 h-6 text-purple-600" />
                    <span>{activeFilter === 'Pending Invoice' ? 'Invoice Management' : `${activeFilter} Orders`}</span>
                    <span className="ml-2 text-base font-semibold text-purple-600">
                      ({activeFilter === 'Pending Invoiced' 
                        ? orders.filter(order => order.status === 'Completed').length
                        : orders.filter(order => order.status === activeFilter).length
                      })
                    </span>
                  </span>
                ) : ['Delivered', 'Courier Hold', 'Courier Return', 'Paid', 'Return', 'Damaged'].includes(activeFilter) ? (
                  <span className="flex items-center gap-2">
                    <MdCheckCircle className="w-6 h-6 text-green-600" />
                    <span>{activeFilter} Orders</span>
                    <span className="ml-2 text-base font-semibold text-green-600">
                      ({orders.filter(order => order.status === activeFilter).length})
                    </span>
                  </span>
                ) : (
                  <>
                    {activeFilter}
                    {['All Orders', 'Processing', 'Pending Payment', 'On Hold', 'Canceled', 'Completed'].includes(activeFilter) && (
                      <span className="ml-2 text-base font-semibold text-blue-600">
                        ({activeFilter === 'All Orders'
                          ? orders.length
                          : orders.filter(order => order.status === activeFilter).length
                        })
                      </span>
                    )}
                  </>
                )}
              </h3>
            </div>
            <div className="flex items-center gap-3">
              <button
                onClick={() => setShowNewOrder(true)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
              >
                <Plus className="w-4 h-4" />
                New Order
              </button>
              <button
                onClick={() => setShowColumnModal(true)}
                className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <Settings className="w-4 h-4" />
              </button>
            </div>
          </div>
          <div className="mb-4">
            <button
              onClick={() => {
                setShowRegularStatusBoxes(false);
                setActiveFilter('Pending Invoice');
              }}
              className="mb-4 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2"
            >
              <ChevronLeft className="w-4 h-4" />
              Back to Invoice Management
            </button>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
              {statusTypes.map((status) => (
                <button
                  key={status}
                  onClick={() => {
                    if (status === 'All Orders') {
                      navigate('/orders');
                    } else {
                      navigate(`/orders/status/${encodeURIComponent(status)}`);
                    }
                  }}
                  className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                    activeFilter === status
                      ? 'shadow-lg scale-105' // active effect
                      : 'hover:shadow-md'
                  } ${statusBoxColors[status] || 'border-gray-200 bg-white text-gray-800'}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="text-left">
                      <div className={`text-2xl font-bold mb-1 ${
                        activeFilter === status ? 'underline' : ''
                      }`}>
                        {getStatusCount(status)}
                      </div>
                      <div className="text-sm font-medium">
                        {status}
                      </div>
                    </div>
                    <div>
                      {getStatusIcon(status)}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
      
        {/* Status Filter Boxes */}
        {!['Pending Invoice', 'Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery', 'Delivered', 'Courier Hold', 'Courier Return', 'Paid', 'Return', 'Damaged'].includes(activeFilter) && (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
            {statusTypes.map((status) => (
              <button
                key={status}
                onClick={() => {
                  if (status === 'All Orders') {
                    navigate('/orders');
                  } else {
                    navigate(`/orders/status/${encodeURIComponent(status)}`);
                  }
                }}
                className={`p-4 rounded-xl border-2 ${statusBoxColors[status]} flex items-center justify-between transition-all duration-300 hover:shadow-md ${
                  activeFilter === status ? 'shadow-lg scale-105' : ''
                }`}
              >
                <div className="text-left">
                  <div className="text-2xl font-bold mb-1">
                    {getStatusCount(status)}
                  </div>
                  <div className="text-sm font-medium">
                    {status}
                  </div>
                </div>
                <div>
                  {getStatusIcon(status)}
                </div>
              </button>
            ))}
          </div>
        )}

        {/* Orders Table */}
        <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
          {/* Table Header */}
          <div className="p-6 border-b border-gray-100">
            {/* টেবিলের উপরে heading ও settings icon এক লাইনে flex justify-between */}
            <div className="flex items-center justify-between mb-6">
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-4">
                  {['Pending Invoice', 'Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery'].includes(activeFilter) ? (
                    <span className="flex items-center gap-2">
                      <MdReceipt className="w-6 h-6 text-purple-600" />
                      <span>{activeFilter === 'Pending Invoice' ? 'Invoice Management' : `${activeFilter} Orders`}</span>
                      <span className="ml-2 text-base font-semibold text-purple-600">
                        ({activeFilter === 'Pending Invoiced' 
                          ? orders.filter(order => order.status === 'Completed').length
                          : orders.filter(order => order.status === activeFilter).length
                        })
                      </span>
                    </span>
                  ) : ['Delivered', 'Courier Hold', 'Courier Return', 'Paid', 'Return', 'Damaged'].includes(activeFilter) ? (
                    <span className="flex items-center gap-2">
                      <MdCheckCircle className="w-6 h-6 text-green-600" />
                      <span>{activeFilter} Orders</span>
                      <span className="ml-2 text-base font-semibold text-green-600">
                        ({orders.filter(order => order.status === activeFilter).length})
                      </span>
                    </span>
                  ) : (
                    <>
                      {activeFilter}
                      {['All Orders', 'Processing', 'Pending Payment', 'On Hold', 'Canceled', 'Completed'].includes(activeFilter) && (
                        <span className="ml-2 text-base font-semibold text-blue-600">
                          ({activeFilter === 'All Orders'
                            ? orders.length
                            : orders.filter(order => order.status === activeFilter).length
                          })
                        </span>
                      )}
                    </>
                  )}
                </h3>
              </div>
              <div className="flex items-center space-x-4">
                {selectedOrders.length > 0 && (
                  <>
                    <div className="relative">
                      <select
                        onChange={(e) => handleBulkStatusChange(e.target.value)}
                        className="appearance-none bg-green-600 text-white px-4 py-2 pr-8 rounded-lg font-medium cursor-pointer hover:bg-green-700 transition-colors"
                        defaultValue=""
                      >
                        <option value="" disabled>Change Status</option>
                        <option value="Processing">Processing</option>
                        <option value="Pending Payment">Pending Payment</option>
                        <option value="On Hold">On Hold</option>
                        <option value="Canceled">Canceled</option>
                        <option value="Completed">Completed</option>
                      </select>
                      <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white pointer-events-none" />
                    </div>
                    <div className="relative">
                      <select
                        onChange={(e) => handleBulkUserAssign(e.target.value)}
                        className="appearance-none bg-purple-600 text-white px-4 py-2 pr-8 rounded-lg font-medium cursor-pointer hover:bg-purple-700 transition-colors"
                        defaultValue=""
                      >
                        <option value="" disabled>User Assign</option>
                        {userOptions.filter(u => u !== 'All Users').map(u => (
                          <option key={u} value={u}>{u}</option>
                        ))}
                      </select>
                      <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white pointer-events-none" />
                    </div>
                    {/* Delete Selected Button */}
                    <button
                      className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium flex items-center space-x-2 transition-colors"
                      onClick={handleDeleteSelected}
                      disabled={deleteLoading}
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>Delete Selected</span>
                      {deleteLoading && <Loader2 className="w-4 h-4 animate-spin" />}
                    </button>
                  </>
                )}
                <button
                  className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-2 rounded-xl font-medium flex items-center space-x-2 shadow-md hover:shadow-lg transition-all duration-300"
                  onClick={() => setShowNewOrder(true)}
                >
                  <Plus className="w-5 h-5" />
                  <span>New Order</span>
                </button>
                {/* টেবিলের উপরে settings icon ও modal */}
                <div className="flex justify-end mb-2">
                  <button
                    className="p-2 rounded-full hover:bg-gray-200 transition-colors"
                    title="Column Settings"
                    onClick={() => setShowColumnModal(true)}
                  >
                    <Settings className="w-6 h-6 text-gray-600" />
                  </button>
                </div>
              </div>
            </div>

            {/* Search and Filter Row */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search Order ID"
                  value={searchOrderId}
                  onChange={(e) => setSearchOrderId(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
                />
              </div>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search Phone"
                  value={searchPhone}
                  onChange={(e) => setSearchPhone(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
                />
              </div>
              <div className="relative">
                <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="date"
                  value={dateFilter}
                  onChange={(e) => setDateFilter(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
                />
              </div>
              <select
                value={courierFilter}
                onChange={(e) => setCourierFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
              >
                {courierOptions.map(option => (
                  <option key={option} value={option === 'All Couriers' ? '' : option}>{option}</option>
                ))}
              </select>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
              >
                {statusOptions.map(option => (
                  <option key={option} value={option === 'All Status' ? '' : option}>{option}</option>
                ))}
              </select>
              <select
                value={userFilter}
                onChange={(e) => setUserFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
              >
                {userOptions.map(option => (
                  <option key={option} value={option === 'All Users' ? '' : option}>{option}</option>
                ))}
              </select>
              <button
                onClick={() => {
                  setSearchOrderId('');
                  setSearchPhone('');
                  setDateFilter('');
                  setCourierFilter('');
                  setStatusFilter('');
                  setUserFilter('');
                }}
                className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium flex items-center justify-center space-x-2 transition-colors"
              >
                <Filter className="w-4 h-4" />
                <span>Clear</span>
              </button>
            </div>
          </div>
          {/* Table */}
          <div className="overflow-x-auto">
            {loading ? (
              <div className="text-center py-10">Loading...</div>
            ) : error ? (
              <div className="text-center py-10">
                <div className="text-red-500 mb-4">{error}</div>
                <div className="text-gray-600 mb-4">
                  <p>Possible solutions:</p>
                  <ul className="text-sm mt-2 space-y-1">
                    <li>• Check if the backend server is running</li>
                    <li>• Verify you are logged in with admin privileges</li>
                    <li>• Check the browser console for more details</li>
                  </ul>
                </div>
                <div className="flex flex-col sm:flex-row gap-3 justify-center">
                  <button
                    onClick={loginForTesting}
                    className="px-6 py-2 rounded-lg bg-green-600 hover:bg-green-700 text-white font-medium transition-colors"
                  >
                    Login with Test Account
                  </button>
                  <button
                    onClick={enableDevMode}
                    className="px-6 py-2 rounded-lg bg-yellow-600 hover:bg-yellow-700 text-white font-medium transition-colors"
                  >
                    Enable Development Mode
                  </button>
                  <button
                    onClick={addSampleOrders}
                    className="px-6 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium transition-colors"
                  >
                    Add Sample Orders
                  </button>
                </div>
              </div>
            ) : (
              <table className="w-full">
                {/* টেবিলের উপরে settings icon ও modal */}
                {showColumnModal && (
                  <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
                    <div className="bg-white rounded-2xl shadow-xl p-6 min-w-[320px] max-w-xs border border-gray-200 relative">
                      <button
                        className="absolute top-2 right-2 text-gray-400 hover:text-red-500 text-2xl font-bold"
                        onClick={() => setShowColumnModal(false)}
                        title="Close"
                      >
                        &times;
                      </button>
                      <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                        <Settings className="w-5 h-5" />
                        Column Settings
                      </h3>
                      <div className="flex flex-col gap-2">
                        {Object.keys(columnVisibility).map(col => (
                          <label key={col} className="flex items-center gap-2 text-sm cursor-pointer">
                            <input
                              type="checkbox"
                              checked={columnVisibility[col]}
                              onChange={() => setColumnVisibility(v => ({ ...v, [col]: !v[col] }))}
                            />
                            {columnLabels[col]}
                          </label>
                        ))}
                      </div>
                      <div className="mt-4 text-xs text-gray-400 text-center">Your column preferences are saved automatically.</div>
                    </div>
                  </div>
                )}
                {/* টেবিলের উপরে কলাম টগল UI */}
                <thead>
                  <tr className="bg-gray-50 border-b border-gray-100">
                    {columnVisibility.select && (
                    <th className="text-left py-4 px-6 font-semibold text-gray-700">
                      <input
                        type="checkbox"
                        checked={selectedOrders.length === currentOrders.length && currentOrders.length > 0}
                        onChange={(e) => handleSelectAll(e.target.checked)}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                    </th>
                    )}
                    {columnVisibility.orderId && <th className="text-left py-4 px-6 font-semibold text-gray-700">Order ID</th>}
                    {columnVisibility.customer && <th className="text-left py-4 px-6 font-semibold text-gray-700">Customer</th>}
                    {columnVisibility.products && <th className="text-left py-4 px-6 font-semibold text-gray-700">Products</th>}
                    {columnVisibility.total && <th className="text-left py-4 px-6 font-semibold text-gray-700">Total</th>}
                    {columnVisibility.date && <th className="text-left py-4 px-6 font-semibold text-gray-700">Date</th>}
                    {columnVisibility.courier && <th className="text-left py-4 px-6 font-semibold text-gray-700">Courier</th>}
                    {columnVisibility.status && <th className="text-left py-4 px-6 font-semibold text-gray-700">Status</th>}
                    {columnVisibility.note && <th className="text-left py-4 px-6 font-semibold text-gray-700">Note</th>}
                    {columnVisibility.user && <th className="text-left py-4 px-6 font-semibold text-gray-700">User</th>}
                    {columnVisibility.actions && <th className="text-left py-4 px-6 font-semibold text-gray-700">Actions</th>}
                  </tr>
                </thead>
                <tbody>
                  {currentOrders.map((order) => (
                    <tr key={order.id} className="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                      {columnVisibility.select && (
                      <td className="py-4 px-6">
                        <input
                          type="checkbox"
                          checked={selectedOrders.includes(order.id)}
                          onChange={(e) => handleSelectOrder(order.id, e.target.checked)}
                          className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                      </td>
                      )}
                      {columnVisibility.orderId && (
                      <td className="py-4 px-6">
                          <div className="flex flex-col items-start">
                        <span className="font-mono text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">#{order.id}</span>
                            <span className={`mt-1 text-xs font-semibold px-2 py-0.5 rounded ${order.source === 'website' ? 'bg-blue-100 text-blue-700' : 'bg-gray-200 text-gray-700'}`}>
                              {order.source === 'website' ? 'Website' : 'Manual'}
                            </span>
                            {order.created_at && (
                              <span className="mt-1 text-xs text-gray-500">{formatDateTime(order.created_at)}</span>
                            )}
                          </div>
                      </td>
                      )}
                      {columnVisibility.customer && (
                      <td className="py-4 px-6">
                          <div className="flex flex-col items-start gap-1">
                            {/* Name */}
                            {order.customerName || order.name ? (
                              <span className="flex items-center gap-1 text-gray-800 text-sm">
                                <User className="w-4 h-4 text-blue-400" />
                                {order.name}
                              </span>
                            ) : null}
                            {/* Phone */}
                            {(order.customerPhone || order.phone) && (
                              <a href={`tel:${order.customerPhone || order.phone || ''}`} className="flex items-center gap-1 text-green-600 hover:text-green-800 hover:underline text-sm">
                                <Phone className="w-4 h-4" />
                                {order.phone}
                              </a>
                            )}
                            {/* Address */}
                            {order.customerAddress || order.address ? (
                              <span className="flex items-center gap-1 text-gray-500 text-xs">
                                <MapPin className="w-4 h-4" />
                                {order.address}
                              </span>
                            ) : null}
                            {/* Customer Note */}
                            {order.customerNote || order.customer_note ? (
                              <span className="flex items-center gap-1 text-gray-400 text-xs">
                                <StickyNote className="w-4 h-4" />
                                {order.customer_note}
                              </span>
                            ) : null}
                          </div>
                      </td>
                      )}
                      {columnVisibility.products && (
                      <td className="py-4 px-6">
                          <div className="max-w-xs text-gray-900" title={order.products || order.product_names || ''}>
                            {Array.isArray(order.products) && order.products.length > 0 ? (
                              <div className="flex flex-col gap-2">
                                {order.products.map((p, idx) => (
                                  <div key={p.product_id || p.id || idx} className="flex items-start gap-2">
                                    <img
                                      src={p.image || '/placeholder.png'}
                                      alt={p.name || 'Product'}
                                      className="w-10 h-10 object-cover rounded border border-gray-300 shadow-sm bg-white"
                                      style={{ minWidth: 40, minHeight: 40 }}
                                    />
                                    <div className="flex flex-col justify-center items-start">
                                      <span className="text-gray-800 text-sm leading-tight">
                                        {(p.quantity || 1) + ' x ' + (p.name || p.product_name || p.id || '')}
                                      </span>
                                      {(p.size || p.weight || p.description) && (
                                        <span className="text-xs text-gray-500 font-medium">
                                          {p.size ? p.size : ''}{p.size && p.weight ? ', ' : ''}{p.weight ? p.weight : ''}{(p.size || p.weight) && p.description ? ' ' : ''}{p.description ? '(' + p.description + ')' : ''}
                                        </span>
                                      )}
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <span>{order.products || order.product_names || ''}</span>
                            )}
                        </div>
                      </td>
                      )}
                      {columnVisibility.total && (
                      <td className="py-4 px-6">
                          <span className="text-gray-900">{order.total}</span>
                        </td>
                      )}
                      {columnVisibility.date && (
                        <td className="py-4 px-6 text-gray-600">
                          <div className="flex flex-col items-start">
                            <span className="text-sm text-gray-800">
                              {order.date ? formatDateTime(order.date) : (order.created_at ? formatDateTime(order.created_at) : '')}
                            </span>
                          </div>
                      </td>
                      )}
                      {columnVisibility.courier && (
                      <td className="py-4 px-6">
                        <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm">
                            {order.courier ? order.courier : '---'}
                        </span>
                      </td>
                      )}
                      {columnVisibility.status && (
                        <td className="py-4 px-6">
                          <div className="relative inline-block w-full">
                            <select
                              value={order.status || 'Processing'}
                              disabled={statusLoading[order.id]}
                              onChange={async (e) => {
                                const statusOpt = e.target.value;
                                if (order.status === statusOpt) return;
                                
                                // Direct status update without confirmation
                                
                                // Handle Invoice status changes for Canceled orders
                                if (order.status === 'Canceled' && ['Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery', 'Delivered'].includes(statusOpt)) {
                                  // Update invoice status for Canceled orders
                                  try {
                                    const token = localStorage.getItem('token');
                                    const headers = { 'Content-Type': 'application/json', ...(token ? { Authorization: 'Bearer ' + token } : {}) };
                                    
                                    // Find existing invoice for this order
                                    const invoiceRes = await fetch(`/api/invoices?order_id=${order.id}`, { headers });
                                    if (invoiceRes.ok) {
                                      const existingInvoices = await invoiceRes.json();
                                      if (Array.isArray(existingInvoices) && existingInvoices.length > 0) {
                                        // Update invoice status
                                        const updateRes = await fetch(`/api/invoices/${existingInvoices[0].id}`, {
                                          method: 'PUT',
                                          headers,
                                          body: JSON.stringify({
                                            ...existingInvoices[0],
                                            status: statusOpt
                                          })
                                        });
                                        
                                        if (updateRes.ok) {
                                          setToast({ show: true, message: `Invoice status updated to ${statusOpt}!` });
                                          window.dispatchEvent(new Event('invoiceCreated'));
                                        } else {
                                          setToast({ show: true, message: 'Failed to update invoice status!' });
                                        }
                                      }
                                    }
                                  } catch (error) {
                                    setToast({ show: true, message: 'Failed to update invoice status: ' + error.message });
                                  }
                                } else if (statusOpt === 'Canceled') {
                                  // Create invoice with Canceled status for new Canceled orders
                                  try {
                                    const token = localStorage.getItem('token');
                                    const headers = { 'Content-Type': 'application/json', ...(token ? { Authorization: 'Bearer ' + token } : {}) };
                                    
                                    // Check if invoice already exists for this order
                                    const invoiceRes = await fetch(`/api/invoices?order_id=${order.id}`, { headers });
                                    let invoiceExists = false;
                                    let existingInvoices = [];
                                    if (invoiceRes.ok) {
                                      existingInvoices = await invoiceRes.json();
                                      invoiceExists = Array.isArray(existingInvoices) && existingInvoices.some(inv => inv.order_id == order.id);
                                    }
                                    
                                    // Create or update invoice with Canceled status
                                    const invoicePayload = {
                                      order_id: order.id,
                                      customer: order.customerName || order.name || '',
                                      total: order.total || 0,
                                      status: 'Canceled',
                                      date: order.date || (order.created_at ? order.created_at.slice(0, 10) : ''),
                                    };
                                    
                                    if (!invoiceExists) {
                                      // Create new invoice
                                      const createRes = await fetch('/api/invoices', {
                                        method: 'POST',
                                        headers,
                                        body: JSON.stringify(invoicePayload)
                                      });
                                      
                                      if (createRes.ok) {
                                        setToast({ show: true, message: 'Canceled invoice created!' });
                                        window.dispatchEvent(new Event('invoiceCreated'));
                                      }
                                    } else {
                                      // Update existing invoice
                                      const updateRes = await fetch(`/api/invoices/${existingInvoices[0].id}`, {
                                        method: 'PUT',
                                        headers,
                                        body: JSON.stringify(invoicePayload)
                                      });
                                      
                                      if (updateRes.ok) {
                                        setToast({ show: true, message: 'Invoice updated to Canceled status!' });
                                        window.dispatchEvent(new Event('invoiceCreated'));
                                      }
                                    }
                                  } catch (error) {
                                    setToast({ show: true, message: 'Failed to create canceled invoice: ' + error.message });
                                  }
                                }
                              
                              setStatusLoading((prev) => ({ ...prev, [order.id]: true }));
                              
                              try {
                                // প্রথমে API কল করুন
                                await updateOrder(order.id, { status: statusOpt });
                                
                                // API সফল হলে, অর্ডার লিস্ট রিফ্রেশ করুন
                                await fetchOrders();
                                
                                // সফল মেসেজ দেখান
                                setToast({ show: true, message: `Status updated to ${statusOpt} successfully!` });
                                
                                // Note কলামের জন্য স্ট্যাটাস আপডেট করুন
                                setCurrentOrderStatus(prev => ({
                                  ...prev,
                                  [order.id]: statusOpt
                                }));
                                
                                // স্ট্যাটাস হিস্টরি আপডেট করুন (শুধু একবার)
                                const newHistoryEntry = {
                                  order_id: order.id,
                                  status: statusOpt,
                                  created_by: 'admin',
                                  created_at: new Date().toISOString()
                                };
                                
                                // শুধু নতুন এন্ট্রি add করুন, ডুপ্লিকেট চেক করে
                                setOrderStatusHistory(prev => {
                                  const existingHistory = prev[order.id] || [];
                                  const lastEntry = existingHistory[existingHistory.length - 1];
                                  
                                  // যদি একই স্ট্যাটাস এবং একই সময়ে add করা হয় তাহলে add করবেন না
                                  if (lastEntry && 
                                      lastEntry.status === statusOpt && 
                                      Math.abs(new Date(lastEntry.created_at) - new Date()) < 5000) { // 5 seconds
                                    return prev;
                                  }
                                  
                                  return {
                                    ...prev,
                                    [order.id]: [
                                      ...existingHistory,
                                      newHistoryEntry
                                    ]
                                  };
                                });
                                
                                // Invoice management based on status
                                if (statusOpt === 'Completed') {
                                  // Completed হলে Invoice তৈরি করুন
                                  try {
                                    // Check if invoice already exists for this order
                                    const token = localStorage.getItem('token');
                                    const headers = { 'Content-Type': 'application/json', ...(token ? { Authorization: 'Bearer ' + token } : {}) };
                                    const invoiceRes = await fetch(`/api/invoices?order_id=${order.id}`, { headers });
                                    
                                    let invoiceExists = false;
                                    if (invoiceRes.ok) {
                                      const invoices = await invoiceRes.json();
                                      invoiceExists = Array.isArray(invoices) && invoices.some(inv => inv.order_id == order.id);
                                    }
                                    
                                    // Only create invoice if it doesn't exist
                                    if (!invoiceExists) {
                                      const invoicePayload = {
                                        order_id: order.id,
                                        customer: order.customerName || order.name || '',
                                        total: order.total || 0,
                                        status: 'Pending Invoiced',
                                        date: order.date || (order.created_at ? order.created_at.slice(0, 10) : ''),
                                      };
                                      
                                      const createRes = await fetch('/api/invoices', {
                                        method: 'POST',
                                        headers,
                                        body: JSON.stringify(invoicePayload)
                                      });
                                      
                                      if (createRes.ok) {
                                        setToast({ show: true, message: 'Invoice created for this order!' });
                                        window.dispatchEvent(new Event('invoiceCreated'));
                                      } else {
                                        const errorText = await createRes.text();
                                        setToast({ show: true, message: 'Failed to create invoice: ' + errorText });
                                      }
                                    } else {
                                      setToast({ show: true, message: 'Invoice already exists for this order!' });
                                    }
                                  } catch (invoiceErr) {
                                    setToast({ show: true, message: 'Order completed but invoice creation failed: ' + invoiceErr.message });
                                  }
                                } else if (order.status === 'Completed' && statusOpt !== 'Completed') {
                                  // Completed থেকে অন্য স্ট্যাটাসে চেঞ্জ করলে Invoice ডিলিট করুন
                                  try {
                                    // Find and delete invoice for this order
                                    const token = localStorage.getItem('token');
                                    const headers = { 'Content-Type': 'application/json', ...(token ? { Authorization: 'Bearer ' + token } : {}) };
                                    
                                    // First, find the invoice
                                    const findRes = await fetch(`/api/invoices?order_id=${order.id}`, { headers });
                                    
                                    if (findRes.ok) {
                                      const invoices = await findRes.json();
                                      
                                      if (Array.isArray(invoices) && invoices.length > 0) {
                                        // Delete each invoice for this order
                                        for (const invoice of invoices) {
                                          const deleteRes = await fetch(`/api/invoices/${invoice.id}`, {
                                            method: 'DELETE',
                                            headers
                                          });
                                          
                                          if (!deleteRes.ok) {
                                            const errorText = await deleteRes.text();
                                            console.error('Failed to delete invoice:', deleteRes.status, errorText);
                                          }
                                        }
                                        
                                        setToast({ show: true, message: 'Invoice removed from Invoice page!' });
                                        window.dispatchEvent(new Event('invoiceDeleted'));
                                      }
                                    }
                                  } catch (invoiceErr) {
                                    setToast({ show: true, message: 'Status changed but invoice deletion failed: ' + invoiceErr.message });
                                  }
                                }
                                
                              } catch (err) {
                                setToast({ show: true, message: 'Status update failed: ' + err.message });
                              } finally {
                                setStatusLoading((prev) => ({ ...prev, [order.id]: false }));
                              }
                            }}
                            className={`w-22 h-9 px-3 py-2 pr-10 rounded text-sm font-medium border focus:ring-2 focus:ring-blue-600 focus:border-blue-600 outline-none appearance-none cursor-pointer transition-colors ${
                              order.status === 'Completed' 
                                ? 'bg-green-500 text-white border-green-500 hover:bg-green-600' 
                                : order.status === 'Canceled'
                                ? 'bg-red-500 text-white border-red-500 hover:bg-red-600'
                                : 'bg-blue-500 text-white border-blue-500 hover:bg-blue-600'
                            }`}
                          >
                            {activeFilter === 'Pending Invoice' || ['Pending Invoiced', 'Invoice Checked', 'Invoiced', 'Stock Out', 'Schedule Delivery'].includes(activeFilter) ? (
                              // Invoice status options for Pending Invoice page and Invoice status filters
                              <>
                                <option value="Invoice Checked">Invoice Checked</option>
                                <option value="Invoiced">Invoiced</option>
                                <option value="Stock Out">Stock Out</option>
                                <option value="Schedule Delivery">Schedule Delivery</option>
                                <option value="Canceled">Canceled</option>
                                <option value="Delivered">Delivered</option>
                              </>
                            ) : order.status === 'Canceled' ? (
                              // Invoice status options for Canceled orders
                              <>
                                <option value="Pending Invoiced">Pending Invoiced</option>
                                <option value="Invoice Checked">Invoice Checked</option>
                                <option value="Invoiced">Invoiced</option>
                                <option value="Stock Out">Stock Out</option>
                                <option value="Schedule Delivery">Schedule Delivery</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Canceled">Canceled</option>
                              </>
                            ) : (
                              // Order status options for other orders
                              <>
                                <option value="Processing">Processing</option>
                                <option value="Pending Payment">Pending Payment</option>
                                <option value="On Hold">On Hold</option>
                                <option value="Canceled">Canceled</option>
                                <option value="Completed">Completed</option>
                              </>
                            )}
                          </select>
                          <ChevronDown className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 pointer-events-none ${
                            order.status === 'Completed' ? 'text-white' : order.status === 'Canceled' ? 'text-white' : 'text-white'
                          }`} />
                          {statusLoading[order.id] && (
                            <span className="absolute right-10 top-1/2 -translate-y-1/2">
                              <Loader2 className={`w-4 h-4 animate-spin ${
                                order.status === 'Completed' ? 'text-white' : order.status === 'Canceled' ? 'text-white' : 'text-white'
                              }`} />
                            </span>
                          )}
                      </div>
                    </td>
                  )}
                  {columnVisibility.note && (
                  <td className="py-4 px-6">
                    <div className="max-w-xs text-gray-600" title={order.note}>
                        {orderStatusHistory[order.id] && orderStatusHistory[order.id].length > 0 ? (
                          <div className="text-sm leading-relaxed">
                            {/* শুধু সবশেষ এন্ট্রি দেখান */}
                            {(() => {
                              const lastEntry = orderStatusHistory[order.id][orderStatusHistory[order.id].length - 1];
                              const timeAgo = getRelativeTime(lastEntry.created_at);
                              // বর্তমান স্ট্যাটাস ব্যবহার করুন, হিস্টরির স্ট্যাটাস নয়
                              const currentStatus = currentOrderStatus[order.id] || order.status;
                              return (
                                <div className="mb-1">
                                  <span className="font-medium text-blue-600">{lastEntry.created_by || 'Admin'}</span>
                                  <span className="text-gray-700"> Successfully Update </span>
                                  <span className="font-mono text-gray-800">{order.id}</span>
                                  <span className="text-gray-700"> Order status to </span>
                                  <span className={`inline-flex items-center px-1 py-0.5 rounded text-xs font-medium ${getStatusBadgeColor(currentStatus)} text-white`}>
                                    {currentStatus}
                                  </span>
                                  <span className="text-gray-500 text-xs"> Updated {timeAgo}</span>
                            </div>
                                  );
                                })()}
                          </div>
                        ) : (
                          <div className="text-sm leading-relaxed">
                            <span className="font-medium text-blue-600">{order.created_by || order.user || 'Admin'}</span>
                            <span className="text-gray-700"> Successfully Update </span>
                            <span className="font-mono text-gray-800">{order.id}</span>
                            <span className="text-gray-700"> Order status to </span>
                            <span className={`inline-flex items-center px-1 py-0.5 rounded text-xs font-medium ${getStatusBadgeColor(currentOrderStatus[order.id] || order.status)} text-white`}>
                              {currentOrderStatus[order.id] || order.status || 'Processing'}
                            </span>
                            <span className="text-gray-500 text-xs"> Updated {getRelativeTime(order.updated_at || order.created_at)}</span>
                          </div>
                        )}
                        {order.note && (
                          <div className="mt-2 pt-2 border-t border-gray-200">
                            <span className="text-xs text-gray-500">{order.note}</span>
                          </div>
                        )}
                    </div>
                  </td>
                  )}
                  {columnVisibility.user && (
                  <td className="py-4 px-6">
                    <div className="flex items-center space-x-2">
                      <User className="w-4 h-4 text-gray-400" />
                      <span className="text-gray-600">{order.user}</span>
                    </div>
                  </td>
                  )}
                  {columnVisibility.actions && (
                  <td className="py-4 px-6">
                    <div className="flex space-x-2">
                      {/* Edit/Delete buttons can be implemented with API integration as needed */}
                        <button
                          className="bg-blue-600 hover:bg-blue-700 text-white p-2 rounded-lg transition-colors"
                          onClick={() => setEditOrderId(order.id)}
                          title="Edit Order"
                        >
                        <Edit2 className="w-4 h-4" />
                      </button>
                      <button
                        className="bg-red-600 hover:bg-red-700 text-white p-2 rounded-lg transition-colors"
                        onClick={() => { setShowDeleteModal(true); setDeleteOrderId(order.id); }}
                        title="Delete Order"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      {filteredOrders.length === 0 && !loading && !error && (
        <div className="text-center py-12">
          <div className="text-gray-400 text-lg mb-2">No orders found</div>
          <p className="text-gray-500">Try adjusting your search criteria.</p>
          <button
            onClick={addSampleOrders}
            className="mt-4 px-6 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium transition-colors"
          >
            Add Sample Orders
          </button>
        </div>
      )}
      
      {/* Pagination */}
      {filteredOrders.length > itemsPerPage && (
        <div className="p-6 border-t border-gray-100">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, filteredOrders.length)} of {filteredOrders.length} orders
            </div>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
                className={`p-2 rounded-lg transition-colors ${
                  currentPage === 1 
                    ? 'text-gray-400 cursor-not-allowed' 
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <ChevronLeft className="w-5 h-5" />
              </button>
              <div className="flex items-center space-x-1">
                {[...Array(Math.min(totalPages, 5))].map((_, index) => {
                  let pageNum;
                  if (totalPages <= 5) {
                    pageNum = index + 1;
                  } else {
                    const start = Math.max(1, currentPage - 2);
                    pageNum = start + index;
                  }
                  
                  return (
                    <button
                      key={pageNum}
                      onClick={() => setCurrentPage(pageNum)}
                      className={`px-3 py-2 rounded-lg transition-colors ${
                        currentPage === pageNum
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-600 hover:bg-gray-100'
                      }`}
                    >
                      {pageNum}
                    </button>
                  );
                })}
              </div>
              <button
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
                className={`p-2 rounded-lg transition-colors ${
                  currentPage === totalPages 
                    ? 'text-gray-400 cursor-not-allowed' 
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <ChevronRight className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>    
      )}
    </div>
  </div>
  </div>

{/* Modals */}
{editOrderId && (
  <OrderEditModal orderId={editOrderId} onClose={() => setEditOrderId(null)} onSaved={fetchOrders} />
)}
{showNewOrder && (
  <OrderEditModal isNew={true} onClose={() => setShowNewOrder(false)} onSaved={fetchOrders} />
)}

{/* Delete Confirmation Modal */}
{showDeleteModal && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div className="bg-white rounded-2xl shadow-xl p-8 min-w-[400px] max-w-md border border-gray-200 text-center">
      <div className="mb-6">
        <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Trash2 className="w-8 h-8 text-red-600" />
        </div>
        <h3 className="text-xl font-bold mb-2 text-gray-900">
          {deleteOrderId ? 'Delete Order?' : `Delete ${selectedOrders.length} Orders?`}
        </h3>
        <p className="text-gray-600 mb-2">
          {deleteOrderId 
            ? 'Are you sure you want to delete this order? This action cannot be undone.'
            : `Are you sure you want to delete ${selectedOrders.length} selected orders? This action cannot be undone.`
          }
        </p>
        <p className="text-gray-500 text-sm">
          {deleteOrderId 
            ? ''
            : ''
          }
        </p>
      </div>
      <div className="flex justify-center gap-4">
        <button
          className="px-6 py-3 rounded-xl bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium transition-colors"
          onClick={() => { 
            setShowDeleteModal(false); 
            setDeleteOrderId(null); 
          }}
          disabled={deleteLoading}
        >
          Cancel
        </button>
        <button
          className="px-6 py-3 rounded-xl bg-red-600 hover:bg-red-700 text-white font-medium transition-colors flex items-center justify-center gap-2"
          onClick={() => {
            if (deleteOrderId) {
              handleDeleteOrder(deleteOrderId);
            } else {
              confirmDeleteSelected();
            }
          }}
          disabled={deleteLoading}
        >
          {deleteLoading && <Loader2 className="w-5 h-5 animate-spin mr-2" />}
          {deleteOrderId ? 'Delete Order' : `Delete ${selectedOrders.length} Orders`}
        </button>
      </div>
    </div>
  </div>
)}

<NotificationToast show={toast.show} message={toast.message} />
</div>
);
};

export default Order;